version: "3.9"

services:
  django:
    build:
      context: ./
      dockerfile: Dockerfile
    container_name: django
    env_file: .env
    working_dir: /app
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn recognition_backend.wsgi:application --bind 0.0.0.0:8000 --workers 3 --timeout 120"
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
    depends_on:
      - postgres
      - minio
    ports:
    - "8000:8000"

    expose:
      - "8000"
    restart: unless-stopped

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx
    depends_on:
      - django
    ports:
      - "80:80"
    volumes:
      - static_volume:/var/www/static
      - media_volume:/var/www/media
    restart: unless-stopped

  postgres:
    image: postgres:16-alpine
    container_name: postgres
    env_file: .env
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      retries: 5
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    container_name: minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      retries: 5
    restart: unless-stopped

volumes:
  pg_data:
  minio_data:
  static_volume:
  media_volume:
